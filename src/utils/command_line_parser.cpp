/*
 *  File Name : command_line_parser.cpp
 *  
 *  Creation Date : 27-06-2016
 *
 *  Last Modified : Mon 04 Jul 2016 04:06:46 PM EDT
 *
 *  Created By : ronin-zero (浪人ー無)
 *
 */

#include "command_line_parser.h"

using namespace std;

void Command_Line_Parser::parse_args( uint_fast32_t argc, char** argv ){

    cout << "Number of arguments: " << argc << endl;

    cout << "They are as follows: " << endl;

    for ( uint_fast32_t i = 0; i < argc; i++ )
    {
        cout << "arg" << i << ": " << argv[i] << "  ";
    }

    cout << endl;
}

void Command_Line_Parser::print_help(){

    cout << "HEIMDALL syscall-sensor" << endl << endl;

    cout << "v 1.0.0" << endl << endl;

    cout << "DESCRIPTION" << endl << endl;

    cout << string( 8, ' ' ) << "This program traces raw system calls and logs them to a specified output file." << endl;
    cout << string( 8, ' ' ) << "See OPTIONS for what data can be traced and logged." << endl;
    cout << string( 8, ' ' ) << "See COMMANDS for what actions can be taken." << endl;
    cout << string( 8, ' ' ) << "See DEFAULTS for the behavior when no options are set." << endl << endl;

    cout << "USAGE" << endl << endl;

    cout << string( 8, ' ' ) << "syscall-sensor [COMMAND] [OPTION]" << endl << endl;

    cout << "COMMANDS" << endl << endl;

    cout << string( 8, ' ' ) << setfill('.') << setw(20) << left << "start" ;
    cout << "Starts tracing accorinding to the given OPTIONS." << endl;
    cout << string( 28, ' ' ) << "Begins reading system call data from the trace pipe and logging it to the specified output file." << endl << endl;

    cout << string( 8, ' ' ) << setfill('.') << setw(20) << left << "stop" ;
    cout << "Stops the sensor (if it is running)." << endl;
    cout << string( 28, ' ' ) << "Cleanly closes the open files, resets the trace pipe, clears filters, and closes the log file." << endl << endl;

    cout << string( 8, ' ' ) << setfill('.') << setw(20) << left << "status";
    cout << "Shows the status of the sensor." << endl;
    cout << string( 28, ' ' ) << "Status information includes whether the sensor is running and what data is being recorded." << endl << endl;


    cout << "OPTIONS" << endl << endl;

    cout << string( 8, ' ' ) << "A system call record contains various information about a process, not all of which may be useful" << endl;
    cout << string( 8, ' ' ) << "in every situation.  This portion of the manual is broken into five sections: " << endl << endl;

    cout << string( 8, ' ' ) << "1. OUTPUT FILE - How to specify the file to which output should be logged." << endl << endl;

    cout << string( 8, ' ' ) << "2. SYSTEM CALLS - An explanation of what data is contained in a system call record caputured in" << endl;
    cout << string( 11, ' ' ) << "ftrace with an example of such a record with its fields labeled." << endl << endl;

    cout << string( 8, ' ' ) << "3. DATA OPTIONS - How to configure the sensor in order to specify what data fields of a system" << endl; 
    cout << string( 11, ' ' ) << "call record should be included in the output log file as well as how to specify" << endl;
    cout << string( 11, ' ' ) << "a character or string to use as a field separator in the logged output (3.1).  The section" << endl;
    cout << string( 11, ' ' ) << "concludes with a table of data fields and their corresponding flags (3.2)." << endl << endl;

    cout << string( 8, ' ' ) << "4. RUNNING OPTIONS - The program can be run in the background as a daemon-like service." << endl;
    cout << string( 11, ' ' ) << "Additionally, the sensor can be configured to either include or ignore system call records" << endl;
    cout << string( 11, ' ' ) << "generated by processes related to the sensor itself." << endl << endl;

    cout << string( 8, ' ' ) << "5. DEFAULT CONFIGURATION - The configuration of the sensor if it is run with no specified" << endl;
    cout << string( 11, ' ' ) << "options at runtime with an example of what a line in the log file would look like with this" << endl;
    cout << string( 11, ' ' ) << "configuration specified." << endl << endl;

    cout << string( 8, ' ' ) << "1. OUTPUT FILE" << endl << endl;

    cout << string( 8, ' ' ) << "-o output_file" << endl;
    cout << string( 11, ' ' ) << "Writes the sensor data to the file specified by \'output_file\'.  The path is relative from wherever" << endl;
    cout << string( 11, ' ' ) << "the command to run the sensor was called.  The filename cannot contain white space." << endl;
    cout << string( 11, ' ' ) << "WARNING: This program should be considered a rough beta.  It strongly recommended that you avoid using" << endl;
    cout << string( 11, ' ' ) << "meta characters or characters with special significance to the terminal.  The input is not guaranteed to" << endl;
    cout << string( 11, ' ' ) << "sanitized and any such behavior is undefined AT BEST.  The user assumes all risk for using this program." << endl << endl;

    cout << string( 8, ' ' ) << "2. SYSTEM CALLS" << endl << endl;

    cout << string( 8, ' ' ) << "A record generated by ftrace looks like the third line of this labeled example:" << endl << endl;

    cout << string( 15, ' ' ) << "TASK-PID   CPU# TFLAGS    TIMESTAMP  FUNCTION  SYSCALL#          SYSCALLARGS" << endl;
    cout << string( 15, ' ' ) << "   | |       |   ||||       |         |             |                  |"      << endl;
    cout << string( 15, ' ' ) << "bash-15509 [002] .... 112170.687012: sys_enter: NR 16 (0, 5403, 7ffd0c9241f0, 0, 0, 700600)" << endl << endl;

    cout << string( 8, ' ' ) << "A brief explanation of each field follows." << endl << endl;

    cout << string( 8, ' ' ) << "TASK" << endl;
    cout << string( 11, ' ' ) << "This is the name of the process that generated the record.  In the example, it is \'bash\'." << endl << endl;

    cout << string( 8, ' ' ) << "PID" << endl;
    cout << string( 11, ' ' ) << "Stands for \"Process ID.\"  It is a number associated with a process that serves as a unique, uniform" << endl;
    cout << string( 11, ' ' ) << "identifier.  Every running process has a PID." << endl << endl;

    cout << string( 8, ' ' ) << "CPU#" << endl;
    cout << string( 11, ' ' ) << "CPU stands for \"Central Processing Unit.\"  On systems with multiple CPUs and/or multiple CPU cores," << endl;
    cout << string( 11, ' ' ) << "process run simultaneously may be run on separate processors/cores.  The CPU# indicates which CPU/core" << endl;
    cout << string( 11, ' ' ) << "is running that process." << endl << endl;

    cout << string( 8, ' ' ) << "TFLAGS" << endl;
    cout << string( 11, ' ' ) << "These are the flags representing certain low-level system information for a process.  There are four flags" << endl;
    cout << string( 11, ' ' ) << "and they are as follows: \'irqs-off,\' \'needs-resched,\' \'hardirq/softirq,\' and \'preempt-depth\'" << endl;
    cout << string( 11, ' ' ) << "(respectively).  Normally, all four will be shown as \'....\' and a user is unlikely to need this field" << endl;
    cout << string( 11, ' ' ) << "in a trace.  It is still given as an option for the sake of completeness.  For more information, please see" << endl;
    cout << string( 11, ' ' ) << "the documentation for ftrace as an in-depth explanation of these fields is beyond the scope of this program's" << endl;
    cout << string( 11, ' ' ) << "concerns and responsiblities." << endl << endl;


    cout << string( 8, ' ' ) << "TIMESTAMP" << endl;
    cout << string( 11, ' ' ) << "This is the time (in miliseconds) at which the function that generated this record was entered." << endl << endl;

    cout << string( 8, ' ' ) << "FUNCTION" << endl;
    cout << string( 11, ' ' ) << "ftrace can be configured to trace specific functions and system calls.  This program traces the \'sys_enter\'" << endl;
    cout << string( 11, ' ' ) << "event which occurs when any system call is made.  This field should always read \'sys_enter.\'  As such, this" << endl;
    cout << string( 11, ' ' ) << "field is omitted by the logged data generated by this program (the field \'NR\' that follows is also constant" << endl;
    cout << string( 11, ' ' ) << "for all records observed by this program and is similarly omitted as it provides no useful information in this" << endl;
    cout << string( 11, ' ' ) << "context).  Information regarding which system call was issued is given by SYSCALL#, the following field." << endl << endl;

    cout << string( 8, ' ' ) << "SYSCALL#" << endl;
    cout << string( 11, ' ' ) << "Every system call has an associated number.  The number of a given system call, the number of total system" << endl;
    cout << string( 11, ' ' ) << "calls available to a system, and even the range of values for system call numbers vary greatly depending on" << endl;
    cout << string( 11, ' ' ) << "the system architecture and operating system.  For instance, on a 64-bit Linux Mips machine, system call number" << endl;
    cout << string( 11, ' ' ) << "values range from 5000 to 5305 (inclusive) and there are 305 system calls in the instruction set (see: Note 1), but" << endl;
    cout << string( 11, ' ' ) << "on an x86 Linux system, system call number values range from 0 to 349 and there are 346 system calls in the" << endl; 
    cout << string( 11, ' ' ) << "instruction set.  The example in this section was collected on a system running x86-64 Linux where the number" << endl;
    cout << string( 11, ' ' ) << "of the system call made by bash is \'16,\' which corresponds to system call \'ioctl\' (see \'man ioctl\' for" << endl;
    cout << string( 11, ' ' ) << "information on this system call)." << endl << endl;

    cout << string( 8, ' ' ) << "SYSCALLARGS" << endl;
    cout << string( 11, ' ' ) << "These are the arguments that were given to the system call made by the process that generated this record." << endl;
    cout << string( 11, ' ' ) << "They may vary in data type (numbers, strings, etc.), values, and even number of arguments.  Normally, this" << endl;
    cout << string( 11, ' ' ) << "field can be safely omitted from a trace without losing pertinent information, but it may be optionally enabled" << endl;
    cout << string( 11, ' ' ) << "for the sake of completeness or in case these data can be used for a separate metric in the future." << endl << endl;

    cout << string( 11, ' ' ) << "Note 1: Not all of the numbers in the range may have an associated system call or the function corresponding to" << endl;
    cout << string( 11, ' ' ) << "a number may not be implemented.  If the range of system call numbers for an instruction set is \'n\' to \'m,\'" << endl;
    cout << string( 11, ' ' ) << "inclusive, there are AT MOST ( m - n ) + 1 system calls in that set." << endl << endl;

    cout << string( 8, ' ' ) << "3. DATA OPTIONS" << endl << endl;

    cout << string( 8, ' ' ) << "3.1 Data Record Fields and Field Separator" << endl << endl;

    cout << string( 8, ' ' ) << "A system call record generated by ftrace contains a lot of information (see: Section 2. SYSTEM CALLS for more" << endl;
    cout << string( 8, ' ' ) << "information and an example), not all of which may be desirable in a generated log.  There are fields that are" << endl;
    cout << string( 8, ' ' ) << "included in a generated log by default (see: Section 5. DEFAULT OPTIONS).  These fields (listed below) each have" << endl;
    cout << string( 8, ' ' ) << "an associated \"flag\" value.  These fields can be configured to be omitted or included in the log either by" << endl;
    cout << string( 8, ' ' ) << "individually giving the option for each separately or by passing the sum (boolean \'or\') of the flags corresponding" << endl;
    cout << string( 8, ' ' ) << "to the desired fields to the \'--flags=\' option (either as a two-digit hex value or a decimal number ranging from" << endl;
    cout << string( 8, ' ' ) << "0 to 255, inclusive).  The two methods can be mixed; the result will just be the inclusion of all the fields" << endl;
    cout << string( 8, ' ' ) << "specified by either method.  A table of data fields and their corresponding flag values and option flags is included" << endl;
    cout << string( 8, ' ' ) << "at the end of this subsection." << endl << endl;

    cout << string( 8, ' ' ) << "--flags=FLAGS" << endl;
    cout << string( 11, ' ' ) << "Specify what fields should be included in the output.  The value of FLAGS is interpreted as the number representing" << endl;
    cout << string( 11, ' ' ) << "the values of the flags corresponding to the fields you wish to include in your output \'or\'d\' together.  The" << endl;
    cout << string( 11, ' ' ) << "value of FLAGS can be given either as a decimal integer between 0 and 255, inclusive, or as the hexidecimal" << endl;
    cout << string( 11, ' ' ) << "representation of the same value.  Hexidecimal values must be in the range 0x00 to 0xFF, inclusive and MUST be" << endl;
    cout << string( 11, ' ' ) << "preceeded by 0x as shown." << endl << endl;

    cout << string( 8, ' ' ) << "-n" << endl;
    cout << string( 11, ' ' ) << "Include the name of the process (TASK in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-p" << endl;
    cout << string( 11, ' ' ) << "Include the process ID of the process (PID in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-c" << endl;
    cout << string( 11, ' ' ) << "Include the CPU number of the process (CPU# in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-f" << endl;
    cout << string( 11, ' ' ) << "Include the field with information about IRQs and scheduling for the process (TFLAGS in section 2)" << endl;
    cout << string( 11, ' ' ) << "in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-t" << endl;
    cout << string( 11, ' ' ) << "Include the timestamp field for the process (TIMESTAMP in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-s" << endl;
    cout << string( 11, ' ' ) << "Include the number of the system call made by the process (SYSCALL# in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "-a" << endl;
    cout << string( 11, ' ' ) << "Include the arguments to the system call made by the process (SYSCALLARGS in section 2) in the log." << endl << endl;

    cout << string( 8, ' ' ) << "--separator=SEP" << endl;
    cout << string( 11, ' ' ) << "Specify how the fields should be separated in the output log.  SEP is interpreted as a string." << endl;
    cout << string( 11, ' ' ) << "WARNING: As this program should be considered a rough beta, the functionality of this option is still" << endl;
    cout << string( 11, ' ' ) << "somewhat limited.  It SHOULD support meta characters such as \\t (for tab) and it SHOULD be able to" << endl;
    cout << string( 11, ' ' ) << "support values for SEP that include whitespace so long as they are within double quotes (\")." << endl;
    cout << string( 11, ' ' ) << "Still, this is an experimental program that is still in development, so no promises are made and no" << endl;
    cout << string( 11, ' ' ) << "guarantees are given." << endl << endl;

    cout << string( 8, ' ' ) << "3.2 Table of Data Field Options" << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill(' ') << left << "Field Name";
    cout << setw(20) << setfill(' ') << left << "Flag Value (Decimal)";
    cout << setw(20) << setfill(' ') << left << "Flag Value (Hex)";
    cout << setw(20) << setfill(' ') << right << "Option Flag" << endl << endl;

    cout << string( 8, ' ' ) << string(80, '=') << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "Process Name";
    cout << setw(20) << setfill('.') << left << "128";
    cout << setw(20) << setfill('.') << left << "0x80";
    cout << setw(20) << setfill('.') << right << "-n"; 

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "PID";
    cout << setw(20) << setfill('.') << left << "64";
    cout << setw(20) << setfill('.') << left << "0x40";
    cout << setw(20) << setfill('.') << right << "-p";

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "CPU";
    cout << setw(20) << setfill('.') << left << "32";
    cout << setw(20) << setfill('.') << left << "0x20";
    cout << setw(20) << setfill('.') << right << "-c"; 

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "Trace Flags";
    cout << setw(20) << setfill('.') << left << "16";
    cout << setw(20) << setfill('.') << left << "0x10";
    cout << setw(20) << setfill('.') << right << "-f";

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "Timestamp";
    cout << setw(20) << setfill('.') << left << "8";
    cout << setw(20) << setfill('.') << left << "0x08";
    cout << setw(20) << setfill('.') << right << "-t"; 

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "System Call Number";
    cout << setw(20) << setfill('.') << left << "4";
    cout << setw(20) << setfill('.') << left << "0x04";
    cout << setw(20) << setfill('.') << right << "-s"; 

    cout << endl << endl;

    cout << string( 8, ' ' ) << setw(20) << setfill('.') << left << "System Call Args";
    cout << setw(20) << setfill('.') << left << "2";
    cout << setw(20) << setfill('.') << left << "0x02";
    cout << setw(20) << setfill('.') << right << "-a";

    cout << endl << endl;

    cout << string( 8, ' ' ) << "4. RUNNING OPTIONS" << endl << endl;

    cout << string( 8, ' ' ) << "This section is a work in progress.  It has no supported options at present.  In the future, I hope to" << endl;
    cout << string( 8, ' ' ) << "include options that will allow the user to select whether to run the program as a background daemon-like" << endl;
    cout << string( 8, ' ' ) << "service or as a foreground program as well as options to specify how long the sensor should run." << endl << endl;

    cout << string( 8, ' ' ) << "5. DEFAULT CONFIGURATION" << endl << endl;

    cout << string( 8, ' ' ) << "When made to run without specifying any arguments, the program will run as a daemon-like background process." << endl;
    cout << string( 8, ' ' ) << "The fields for the name of the process, PID, timestamp, and system call number will be logged as a single line" << endl;
    cout << string( 8, ' ' ) << "separated by a comma (\',\') as the default separator (SEP value).  This is effectively a CSV.  Data will be" << endl;
    cout << string( 8, ' ' ) << "to a file named \"trace.log\" in the directory from which the command to execute the program was given. It is" << endl;
    cout << string( 8, ' ' ) << "equivalent executing any of the following commands:" << endl << endl;

    cout << string( 11, ' ' ) << "syscall-sensor start" << endl << endl;

    cout << string( 11, ' ' ) << "syscall-sensor start -n -p -t -s --separator=, -o trace.log" << endl << endl;

    cout << string( 11, ' ' ) << "syscall-sensor start --flags=0xCC --separator=, -o trace.log" << endl << endl;

    cout << string( 11, ' ' ) << "syscall-sensor start --flags=204 --separator=, -o trace.log" << endl << endl;

    cout << string( 8, ' ' ) << "If the record in the example in section 2 appeared in a trace during execution of this program with the default" << endl;
    cout << string( 8, ' ' ) << "settings (or with the explicit options above), its corresponding record in the log would appear as follows:" << endl << endl;

    cout << string( 11, ' ' ) << "bash,15509,112170.687012,16" << endl << endl;

    cout << string( 8, ' ' ) << "(without the leading whitespace)" << endl << endl;

    cout << string( 8, ' ' ) << "Please report bugs to:" << endl << endl;

    cout << string( 11, ' ' ) << "ronin-zero@github.com" << endl << endl;

    cout << string( 8, ' ' ) << "The project's main repository can be found at:" << endl << endl;
    cout << string( 11, ' ' ) << "https://github.com/ronin-zero/heimdall" << endl << endl;

    cout << "Written by: 浪人ー無, 2016" << endl << endl;
}

void Command_Line_Parser::print_args(){

    for ( int i = 0; i < args.size(); i++ )
    {
        std::cout << "Arg #" << i << ": " << args[i] << std::endl;
    }
}
